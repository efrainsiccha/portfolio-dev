---
import menus from "../collections/menu.json";
import Logo from "../components/logo.astro";
---

<!-- This is an invisible div with relative position so that it takes up the height of the menu (because menu is absolute/fixed) -->
<div class="relative w-full h-20 opacity-0 pointer-events-none"></div>
<header id="header" class="absolute top-0 z-50 w-full h-20">
  <div
    class="flex items-center justify-between h-full max-w-5xl pl-6 pr-4 mx-auto border-b border-l-0 border-r-0 border-transparent select-none lg:border-r lg:border-l lg:rounded-b-xl"
  >
    <Logo />
    <div
      id="mobileMenuBackground"
      onclick="closeMobileMenu()"
      class="fixed inset-0 z-20 hidden w-screen h-screen duration-300 ease-out bg-white/90 dark:bg-neutral-950/90"
    >
    </div>
    <nav
      class="relative z-30 flex flex-row-reverse justify-start w-full text-sm sm:justify-end text-neutral-500 dark:text-neutral-400 sm:flex-row"
    >
      <div
        id="openMenu"
        class="flex flex-col items-end justify-center w-6 h-6 ml-4 cursor-pointer sm:hidden"
      >
        <svg
          class="w-8 h-8 dark:text-neutral-200"
          fill="none"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          viewBox="0 0 24 24"
          stroke="currentColor"><path d="M4 8h16M4 16h16"></path></svg
        >
      </div>
      <div
        id="closeMenu"
        class="flex-col items-end justify-center hidden w-6 h-6 ml-4 -translate-x-1 cursor-pointer sm:hidden"
      >
        <svg
          class="w-6 h-6 text-neutral-600 dark:text-neutral-200"
          fill="none"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          viewBox="0 0 24 24"
          stroke="currentColor"><path d="M6 18L18 6M6 6l12 12"></path></svg
        >
      </div>
      <div
        id="menu"
        class="fixed top-[75px] ease-out duration-300 sm:top-0 sm:py-0 pt-7 pb-4 dm:mx-0 left-0 z-40 flex-col items-end justify-start hidden w-full h-auto text-sm sm:h-auto sm:relative sm:flex-row sm:flex sm:text-sm sm:w-auto sm:pr-0 sm:pt-0"
      >
        <div
          class="absolute inset-0 top-0 right-0 block w-full h-full px-3 sm:hidden"
        >
          <div
            class="relative w-full h-full bg-white border border-dashed border-neutral-300 dark:border-neutral-700 backdrop-blur-sm rounded-xl dark:bg-neutral-950"
          >
          </div>
        </div>
        {
          menus.map((menu) => {
            return (
              <a
                href={menu.url}
                class="relative flex items-center justify-center w-full px-3 py-2 font-medium tracking-wide text-center duration-200 ease-out sm:py-0 sm:mb-0 md:w-auto"
              >
                {menu.name}
              </a>
            )
          })
        }
      </div>
      <div
        id="darkToggle"
        class="relative flex items-center pl-6 ml-4 font-medium tracking-wide cursor-pointer text-neutral-800 group dark:text-white"
      >
        <div
          class="absolute left-0 flex items-center justify-center w-6 h-6 overflow-hidden border-b border-transparent horizon group-hover:border-neutral-600"
        >
          <svg
            class="absolute w-6 h-6 transition duration-700 transform ease"
            id="sun"
            fill="none"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            viewBox="0 0 24 24"
            stroke="currentColor"
            ><path
              d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
            ></path></svg
          >
          <svg
            class="absolute hidden w-6 h-6 transition duration-700 transform ease"
            id="moon"
            fill="none"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            viewBox="0 0 24 24"
            stroke="currentColor"
            ><path
              d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
            ></path></svg
          >
        </div>
        <span class="hidden sm:inline-block">
          <span id="dayText" class="ml-2"></span>
          <span id="nightText" class="hidden ml-2"></span>
        </span>
      </div>
    </nav>
  </div>
</header>

<script>
  // Mapeo de URLs a IDs de sección
  const sectionMap: Record<string, string> = {
    '/portfolio-dev/': 'inicio',
    '/portfolio-dev/proyectos': 'proyectos',
    '/portfolio-dev/experiencia': 'experiencia',
    '/portfolio-dev/sobre-mi': 'sobre-mi',
    '/portfolio-dev/contacto': 'contacto'
  };



  // Función para scroll suave a sección
  function smoothScrollToSection(sectionId: string): void {
    let element = document.getElementById(sectionId);
    
    // Marcar que estamos haciendo scroll programático
    isProgrammaticScroll = true;
    
    // Caso especial para "inicio" - ir al tope de la página
    if (sectionId === 'inicio') {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
      // Resetear después del scroll
      setTimeout(() => {
        isProgrammaticScroll = false;
      }, 1000);
      return;
    }
    
    if (element) {
      const headerHeight = 80; // Altura del header
      const extraOffset = 40; // Offset adicional para subir más
      const elementPosition = element.offsetTop - headerHeight - extraOffset;
      
      window.scrollTo({
        top: elementPosition,
        behavior: 'smooth'
      });
      
      // Resetear después del scroll
      setTimeout(() => {
        isProgrammaticScroll = false;
      }, 1000);
    }
  }

  // Variable para controlar si estamos haciendo scroll programático
  let isProgrammaticScroll = false;

  // Función para actualizar el enlace activo
  function updateActiveLink(sectionId: string): void {
    const menuLinks = document.querySelectorAll('nav a[href^="/portfolio-dev/"]');
    
    menuLinks.forEach((link: Element) => {
      const href = (link as HTMLAnchorElement).getAttribute('href');
      const linkSectionId = href ? sectionMap[href] : null;
      
      if (linkSectionId === sectionId) {
        // Enlace activo - negro en light mode, blanco en dark mode
        link.classList.add('!text-black', 'dark:!text-white');
        link.classList.remove('text-neutral-500', 'dark:text-neutral-400');
      } else {
        // Enlace inactivo - gris
        link.classList.remove('!text-black', 'dark:!text-white');
        link.classList.add('text-neutral-500', 'dark:text-neutral-400');
      }
    });
  }

  // Función para detectar qué sección está visible
  function getCurrentSection(): string {
    // Si estamos en la página de proyectos, siempre retornar 'proyectos'
    if (window.location.pathname === '/portfolio-dev/projects') {
      return 'proyectos';
    }
    
    const sections = ['inicio', 'proyectos', 'experiencia', 'sobre-mi', 'contacto'];
    const scrollPosition = window.scrollY + 150; // Offset ajustado
    
    // Caso especial para "inicio" - si estamos cerca del tope
    if (scrollPosition < 300) {
      return 'inicio';
    }
    
    // Buscar la sección actual basada en la posición del scroll
    for (let i = sections.length - 1; i >= 0; i--) {
      const section = document.getElementById(sections[i]);
      if (section) {
        const sectionTop = section.offsetTop;
        const sectionBottom = sectionTop + section.offsetHeight;
        
        // Si el scroll está dentro de esta sección
        if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
          return sections[i];
        }
      }
    }
    
    return 'inicio';
  }

  // Función para manejar el scroll y actualizar navegación activa
  function handleScroll(): void {
    // No actualizar durante scroll programático
    if (isProgrammaticScroll) {
      return;
    }
    
    const currentSection = getCurrentSection();
    updateActiveLink(currentSection);
  }

  // Agregar event listeners a todos los enlaces del menú
  document.addEventListener('DOMContentLoaded', function() {
    const menuLinks = document.querySelectorAll('nav a[href^="/portfolio-dev/"]');
    
    menuLinks.forEach((link: Element) => {
      link.addEventListener('click', (e: Event) => {
        e.preventDefault();
        const href = (link as HTMLAnchorElement).getAttribute('href');
        const sectionId = href ? sectionMap[href] : null;
        
        if (sectionId) {
          // Si estamos en una página diferente a la principal, redirigir
          if (window.location.pathname !== '/portfolio-dev/' && window.location.pathname !== '/') {
            // Guardar la sección destino en sessionStorage
            sessionStorage.setItem('scrollToSection', sectionId);
            // Redirigir a la página principal
            window.location.href = '/portfolio-dev/';
            return;
          }
          
          // Actualizar el enlace activo INMEDIATAMENTE
          updateActiveLink(sectionId);
          
          // Pequeño delay para asegurar que las clases se apliquen
          setTimeout(() => {
            smoothScrollToSection(sectionId);
          }, 10);
        }
      });
    });

    // Agregar listener para scroll
    window.addEventListener('scroll', handleScroll);
    
    // Inicializar el estado activo
    handleScroll();
    
    // Si estamos en la página de proyectos, marcar "Proyectos" como activo
    if (window.location.pathname === '/portfolio-dev/projects') {
      updateActiveLink('proyectos');
    }
    
    // Verificar si hay una sección guardada en sessionStorage para hacer scroll
    const savedSection = sessionStorage.getItem('scrollToSection');
    if (savedSection) {
      // Limpiar el sessionStorage
      sessionStorage.removeItem('scrollToSection');
      
      // Hacer scroll a la sección guardada
      setTimeout(() => {
        smoothScrollToSection(savedSection);
        updateActiveLink(savedSection);
      }, 200);
    }
  });
</script>
